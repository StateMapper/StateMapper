#!/bin/bash

# StateMapper: worldwide, collaborative, public data reviewing and monitoring tool.
# Copyright (C) 2017  StateMapper.net <statemapper@riseup.net>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
 

# MAIN STATEMAPPER BASH SCRIPT

# nice levels for this script (the higher, the less priority)
IONICE=3
NICE=19

# STOP EDITING BELOW!




# find out what the Apache user is (to later execute PHP with it)
APACHE_USER=$(ps -ef | egrep '(httpd|apache2|apache)' 2> /dev/null | grep -v `whoami` 2> /dev/null | grep -v root 2> /dev/null | head -n1 | awk '{print $1}' 2> /dev/null)

CMD=$1
BASE_DIR=$(dirname "$0")

# change the nice levels at your convenency (using the smallest now)
BASE_CMD="ionice -c $IONICE nice -n $NICE php $BASE_DIR/../index.php"
PHP_CMD="$BASE_CMD $*"

function contains {
  local list="$1"
  local item="$2"
  if [[ $list =~ (^|[[:space:]])"$item"($|[[:space:]]) ]] ; then
    # yes, list include item
    result=0
  else
    result=1
  fi
  return $result
}

# grab Ctrl+C and interrupt the call beautifully
SMAP_TTY_ORIGIN=`stty -g`
export SMAP_TTY_ORIGIN
trap stop INT TSTP
stty -echo -icanon time 2 || exit $?
function stop {
	echo "User interruption, plan unexpected results!"
	stty $SMAP_TTY_ORIGIN
	exit 1
}
function end {
	stty $SMAP_TTY_ORIGIN
	if [ "$1" = "" ]
	then
		exit
	else
		exit "$1"
	fi
}

# git shortcuts
if [ "$CMD" = "push" ]
then
	cd "$BASE_DIR/.."
	sudo su - $APACHE_USER -s /bin/bash -c "$BASE_CMD compile" # compile manuals
	
	git add *
	git add .*
	if [ "$2" = "-m" ]
	then
		git commit -m "$3"
	else
		git commit
	fi
	git push
	end
fi
if [ "$CMD" = "pull" ]
then
	cd "$BASE_DIR/.." && git pull
	end
fi

# daemon
if [ "$CMD" = "daemon" ]
then
	# daemonizing
	DAEMON_CMD="$2"
	
	if [ -f "$BASE_DIR/.statemapper.lock" ]
	then
		PID=$(cat $BASE_DIR/.statemapper.lock)
		if [ "$PID" != "" ]
		then
			if ps -p "$PID" > /dev/null 2>&1
			then
				# print the daemon status
				if [ "$DAEMON_CMD" = "status" ]
				then
					echo "StateMapper daemon running with PID $PID"
					end 0
				fi
				
				# kill the daemon
				if [ "$DAEMON_CMD" = "kill" ]
				then
					sudo kill -9 "$PID" 
					rm "$BASE_DIR/.statemapper.lock"
					echo "StateMapper daemon killed"
					end 0
				fi
				
				# stop the daemon, waiting for workers
				if contains "stop restart" "$DAEMON_CMD"
				then
					sudo su - $APACHE_USER -s /bin/bash -c "$BASE_CMD daemon stop" 2> /dev/null
					if [ $? -eq 0 ]
					then
						rm "$BASE_DIR/.statemapper.lock"
						echo "StateMapper daemon stopped"
					else
						echo "Could not stop the StateMapper daemon"
					fi
					if [ "$DAEMON_CMD" = "stop" ]
					then
						end 0
					else
						DAEMON_CMD="start"
					fi

				else
					echo "StateMapper daemon already running with PID $PID"
					end 1
				fi
				
			fi
		fi
	fi

	# daemon is not running
	if contains "kill stop status" "$DAEMON_CMD"
	then
		echo "StateMapper daemon not running"
		end 1
	fi
	
	if contains "-d -dd" "$DAEMON_CMD"
	then
		# debug, not daemonized
		if contains "-d" "$DAEMON_CMD"
		then
			sudo echo "StateMapper daemon debugging.."
		else
			sudo echo "StateMapper daemon advanced debugging.."
		fi
		#PHP_CMD="$PHP_CMD "'echo "$!"'
		sudo su - $APACHE_USER -s /bin/bash -c "$PHP_CMD"
	else
	
		# daemonize and print PID into .lock file
		PHP_CMD="nohup $PHP_CMD >/dev/null 2>&1 &"' echo "$!"'
		sudo su - $APACHE_USER -s /bin/bash -c "$PHP_CMD" > $BASE_DIR/.statemapper.lock
		PID=$(cat $BASE_DIR/.statemapper.lock)
		echo "StateMapper daemon started with PID $PID"
	fi

else
	# not a daemon command, pass it to PHP
	sudo su - $APACHE_USER -s /bin/bash -c "$PHP_CMD"
fi

end 0
