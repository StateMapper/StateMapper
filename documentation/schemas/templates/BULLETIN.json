{
	id: "XX/BULLETIN",											// the schema's path/ID
	type: "bulletin",											// the type of entity described (bulletin, institution, country...)
	providerId: "XX/PROVIDER",									// the full schema path/ID of the bulletin's provider
	official: true,												// set to true for offical bulletins
	name: "Official Bulletin's Name",							// the bulletin's full name
	shortName: "BULLETIN",										// the bulletin's short name
	siteUrl: "https://www.bulletinrootwebsite.xx/",				// the bulletin's main site URL
	searchUrl: "https://www.bulletinrootwebsite.xx/searchuri/", // the bulletin's web search URL
					
	frequency: {
		weekDays: ["MO", "TU", "WE", "TH", "FR", "SA"] 			// weekdays of publication
	},
	
	idFormats: [												// used to check if a file is of this type of bulletin
		"BULLETIN-[A-Z0-9-_]+"
	],
	
	onProgress: true,											// will be removed once fetching and extracting fully work
	
	guesses: {													// used to guess parameters according to others
		type: {
			id: [												// guess the bulletin's type according to its id
				{
					pattern: "#^(BULLETIN-[A-Z]-[0-9]{4}-[0-9]+)$#i",
					transform: [
						{
							type: "assign",
							value: "document"
						}
					]
				},
				{
					pattern: "#^(BULLETIN-[0-9]{4}-[0-9]+)$#i",
					transform: [
						{
							type: "assign",
							value: "Summary"
						}
					]
				}
			]
		}
	},
															//
	fetchProtocoles: { 										// ## FETCH PROTOCOLES
		summary: {
			type: "Summary", 								// type of entity fetched with this protocole
			protocoles: [
				{
					input: {
						format: "xml", 						// original output format
						parameters: ["date"]				// input parameters needed for such fetch protocole
					},
					protocole: {
						default: {
							steps: [						// steps to get the output
								{
									type: "HTTP",			// an HTTP request
									method: "GET",			// a GET HTTP request
									url: "https://www.bulletinrootwebsite.xx/searchuri/xml.php?id=BULLETIN-{date:formatDate(Ymd)}" 
								}
							]
						}
					}
				}
			]
		},
		document: {
			type: "document", 								// type of entity fetched with this protocole
			protocoles: [
				{
					input: {
						format: "xml",
						parameters: ["id"]					// input parameters needed for such fetch protocole
					},
					protocole: {
						default: {
							steps: [
								{
									type: "HTTP",
									method: "GET",
									url: "https://www.bulletinrootwebsite.xx/searchuri/xml.php?id={id}"
								}
							]
						}
					}
				}
			]
		}
	},														
															//
	parsingProtocoles: { 									// ## PARSING PROTOCOLES
		summaries: {
			type: "Summary", 								// parsing protocole for Summary types (and xml format)
			format: "xml", 
			protocole: { 									// the parsed root object description
				published: { 								// an attribute of the root object
					selector: "/some/x/path", 				// the xpath of such attribute
					transform: [							// transformations applied to the attribute's value
						{
							type: "parseDate",				// parse the value as a date
							dateFormat: "m/d/Y"				// with this date format
						}
					]
				},
				children: {									// this is an array of objects (as attributes)
					theChildrenAttributeName: {				// an array attribute sections

						selector: "//any_xpath_node",
						
						title: {							// .. with each object a title attribute
							selector: "@nombre",			// .. which is the object's nombre (xml) attribute
							transform: [
								{
									type: "parseList",		// parse the value as a list
									delimiter: "."			// .. with a dot delimiter
								}
							]
						},
						
						children: {
							departments: {
								title: "@someAttribute",
								selector: "./a/relative/xPath",
								children: {
									items: {
										selector: "./a/relative/xPath",
										schema: "XX/BULLETIN",	// the schema of the entity
										id: "@someAttribute",
										title: "./a/relative/xPath",
										type: "document",		// the entity type (as described in this schema)
										follow: true			// set follow to true to allow following with a sub-request, or use an object to follow according to conditions of attributes
									}
								}
							}
						},
						
						childrenWhere: { 								// a condition (or many) to check before building the children
							or: {										// match one of the following conditions
								title: "#(someRegexpToMatch)#ius",
								whateverOtherAttribute: "#^(?:anotherRegexp)$#"
							}
						}
					}
				}
			}
		},
		document: {
			format: "xml",
			protocole: {
				title: "/some/x/path/text()[1]",
				
				someDescriptiveAttribute: {
					value: ".",
					selector: "/some/x/path",
					transform: [
						{
							type: "splitBy",
							regexp: "#(someRegexp)#us",
							includeSeparator: true
						},
						{
							type: "regexpMatch",
							regexp: "#^(someRegexp)\s*(matchingRegexp)$#us",
							match: "$2"
						}
					],
					else: {												// try taking this value if not found before
						selector: "/some/x/path",
						value: "."
					}
				},
				someOtherDescriptiveAttribute: {
					selector: "/some/x/path",
					transform: [
						{ 
							type: "parseMonetary"
						}
					]
				},
				
				contractTargetEntities: {
					selector: "/documento/texto",
					transform: [
						{
							type: "grepLegalEntities",
							outerSelector: "\bcontratista\s*:\s*(.+?)\s*(?:\.*\s*\b[bcdefgh]\s*\).*)$",						// an outer selector to grep legalEntities from. First match will be used! use (?: to not match some patterns
							
							stripBeforeMatch: [
								"#[0-9\.,]+\s+(?:euro?s?\b|€)(?:\s*;)?#ius"							// strip thing like 127.650,00 €
							],
							stripFromMatch: [													// strip things between parenthesis
								"#(\.\s*[a-z])$#ius"											// some codes than appear after name, after a dot	
							],
							entityExtra: {
								type: "company"
							},
							allowEntityPrefix: "(?:(?:[Ee][Ll]|[Ll][Oo][Ss]\s+)?[Ll][Oo][Tt][Ee][Ss]?\s*(?:adjudicados?\s*:?\s*)?(?:[A-Z0-9/\.,:y«–-]+\b\s*,?\s*)+\s*[\.-]?\s*:?\s*)*"		// can be matched before entities (but stripped from result). Nothing must be matches! please use (?: 
						}
					]
				},
				
				someDescriptiveEntityAttribute: {
					selector: "/some/x/path",
					transform: [
						{
							type: "regexpMatch",
							regexp: "#^something(theRegexpMatch)(?:.*)$#iusm",
							match: "$1"
						},
						{
							type: "grepLegalEntities",
							entityExtra: {
								type: "institution"
							}
						}
					]
				}
			}
		}
	},
	
	extractProtocoles: { 																	// ## Extract parts of parsed object
																							//
		directAdjudge: {
			title: "Adjudges",														
			
			selector: "//sections//items//followed[modality='#Formalización#iu' OR contractType='#Adjudica#iu']", 		// extract specific items .. [amount>=1]
			
			content: ".",
			parts: ["publish", "schema", "id", "url", "amount", "contractType", "modality", "modalityId", "serviceCode", "serviceLabel", "contractExpedientId", "legalEntity", "contractExecutive", "contractTargetEntities", "originalText", "nationalIds", "currency"],					// parts to keep
			
			previewParts: {																	// parts to preview
				_type: "fund",
				_action: "new",
				
				id: {
					title: "Bulletin ID",
					transform: [
						{
							type: "linkBulletin",
							entityType: "document"
						}
					]
				},
				issuing: {
					var: "contractExecutive",
					title: "Issuing", 
					transform: [
						{
							type: "formatEntities"
						}
					]
				},
				related: {
					var: "contractTargetEntities",
					title: "Related", 
					transform: [
						{
							type: "formatEntities"
						}
					]
				},
				amount: {
					title: "Amounts",
					transform: [
						{
							type: "formatGroupAmounts"
						}
					]
				},
				type: {
					var: "modality",
					title: "Contract Type"
				},
				sector: {
					var: "contractType",
					title: "Service Type"
				},
				service: {
					var: "serviceLabel",
					title: "Sector"
				},
				text: {
					var: "originalText",
					title: "Original text"
				}
			}
		}
	},
	
	soldiers: [
		{
			name: "Kaos155 hacker team",
			users: ["statemapper"]
		}
	]
	
}
